import UIKit

/*
 1. Написать функцию, которая определяет, четное число или нет.
 2. Написать функцию, которая определяет, делится ли число без остатка на 3.
 3. Создать возрастающий массив из 100 чисел.
 4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3.
 5. * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 50 элементов.
 Числа Фибоначчи определяются соотношениями Fn=Fn-1 + Fn-2.

 6. * Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу. Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:
 a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
 b. Пусть переменная p изначально равна двум — первому простому числу.
 c. Зачеркнуть в списке числа от 2 + p до n, считая шагом p..
 d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
 e. Повторять шаги c и d, пока возможно.
 */


/* 1. Написать функцию, которая определяет, четное число или нет. */
func IsEven(_ number : Int) -> Bool {
    return number % 2 == 0
}

/* 2. Написать функцию, которая определяет, делится ли число без остатка на 3. */
func IsMultipleTrhee(_ number : Int) -> Bool {
    return number % 3 == 0
}

/* Функция для: 3. Создать возрастающий массив из 100 чисел. */
func GetArrayOfNaturalElems(_ numElems : Int = 100) -> [Int] {
    var resArray = [Int]()
    
    for item in 0..<numElems {
        resArray.append(item)
    }
    
    return resArray
}

/* Функция для: 5. * Написать функцию, которая добавляет в массив новое число Фибоначчи,
 и добавить при помощи нее 50 элементов. */
func GetArrayFibNumbers(_ numberElem : Int = 50) -> [Int] {
    var (a, b) = (0, 1)
    var resArray = [Int]()

    for _ in 1 ..< numberElem {
        (a, b) = (b, a + b)
        resArray.append(a)
    }

    return resArray
}


/* Функция для: 6. * Заполнить массив из 100 элементов различными простыми числами.
 Построена на алгоритме решета Эратосфена. 107 (или 90 с короткими именами) символов. */
func GetArrayOfSimpleNumbers(_ n: Int) -> [Int] {
    var res = [Int]()
    
    for i in 2...n {
        var flag = false
        
        for j in res {
            if i % j == 0 { flag = true; break }
        }
        if !flag { res.append(i) }
    }
    
    return res
}

/* ---------------------- Вызовы функций ----------------------- */

/* 3. Создать возрастающий массив из 100 чисел.
   4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3. */
var array = GetArrayOfNaturalElems(), indx = 0
for item in array {
    if IsEven(item) || !IsMultipleTrhee(item) {
        array.remove(at: indx)
    }
    else {
        indx += 1
    }
}

/* ----------------------------------------------------- */
/* Более короткое и аккуратное решение для 3 и 4 пунктов */
var resArray = [Int]()
for item in GetArrayOfNaturalElems() {
    if !IsEven(item) && IsMultipleTrhee(item) {
        resArray.append(item)
    }
}
/* ----------------------------------------------------- */

/* 5. * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 50 элементов. */
array += GetArrayFibNumbers(50)

/* 6. * Заполнить массив из 100 элементов различными простыми числами. */
array += GetArrayOfSimpleNumbers(100)

print(array)
